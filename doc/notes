    echo {var} >> file 
                                    --Broken by whitespace into parts
    [part] [part] [part] [part]
                                    --Analyzed lexically, concurrently
    [word] [expansion] [redirection] [word]
                                    --*Prepare to execute!*
    [command] [word] [redirection]
                                    --Execute!  

    Functions that take place before concurrent handling:
        - get_parts() 
            Break line into parts 

    Functions that take place concurrently (across parts):
        - Quote resolution
            - [text][quoted-text][text][quoted-text]...
        - Expansion: inspection, interpretation
        - Selection

    Functions that take place after units have join'ed:  
        - Word Math // Only two operators, so far-- maybe, "matches"? ~
        - Redirection validation, interpretation
        - Is valid command (should be verified for each pipe element)
            ...You just pass that information *in*:  
            fn ______( str: text, bool: is_command)

    enum Redir {
        FROM(fd), TO(fd)
        FROM(fd), TO(filename)
        FROM(filename), TO(fd)
    } // ...be very careful about opening the right file to the right file 
      // descriptor...

      Could just be FROM(filename), TO(filename) (i.e., a 2-tuple) if `fd`
      can be mapped to a `filename`.  Which, `/proc/{PID}/{fd}` expands into...
            Or we could open the file and associate it with an `fd`.


    enum Command{
        ShellConstruct(Construct), // if, elif, else, for, while, match, etc.
        Builtin(String), // Or reference to function
        UserFunction(String),  // Or reference, if possible
        ExternalCommand(Filename), // Or other reference
        NotFound, // Only NotFound after a *thorough* inspection of (actual) directories on PATH
    }


    enum Token {  // Expansion has already taken place.  
        Word(text), // The simplest case `text` => `text`
        Command(Comm),
        IsPython,
        DoubleQuoted([Word], selector),     //Recursive call needed... All the way 
        Quoted(text),                       //back to the begining!
        Redirection(Redir),
        Colon,
    }
