
    Seems like the design of this shell is wrong.  Seems like it should have
    an "interpretation" section, like a parser, that breaks the line into 
    useful bits, and passes it to back up in a partially-rendered form.  Like,
    "The line is *of the form* so and so.  Maybe

    echo {var} >> file 
                                    --Broken by whitespace into parts
    [part] [part] [part] [part]
                                    --Analyzed lexically, concurrently
    [word] [expansion] [redirection] [word]
                                    --*Prepare to execute!*
    [command] [word] [redirection]
                                    --Execute!  

    enum Command{
        Construct(Construct),
        Builtin(String), // Or reference to function
        Function(String), 
        ExternalCommand(Filename), // Or other reference
    }


    Functions that take place concurrently (across Units):
        - Quote resolution
        - Expansion: inspection, interpretation
        - Selection
        - Is valid command
            ...You just pass that information *in*:  
            fn ______( str: text, bool: is_command)

    Functions that take place after units have join'ed:  
        - Word Math
        - Selection
        - Redirection interpretation

    enum ExpansionType {
        Variable
        FilePath
        Subshell
    }

    enum Redir {
        
    }

    enum Word {  // Expansion has already taken place.  
        Command
        Raw(text),
        DoubleQuoted([Word], selector),     //Recursive call needed... All the way 
        Quoted(text),                       //back to the begining!
        Redirection(Redir),
        Colon,
    }
